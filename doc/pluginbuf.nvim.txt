*pluginbuf.nvim.txt*

==============================================================================
Lua module: pluginbuf                               *pluginbuf.nvim-pluginbuf*

register({scheme_name}, {route_definitions})            *pluginbuf.register()*
  Registers scheme handler.

  Parameters: ~
    {scheme_name} (string) scheme name part in `scheme_name://path?query`
    {route_definitions} (PluginbufRouteDefinition[]) |PluginbufRouteDefinition|

unregister({scheme_name})                             *pluginbuf.unregister()*
  Unregisters scheme handler.

  Parameters: ~
    {scheme_name} (string) scheme name part in `scheme_name://path?query`

==============================================================================
STRUCTURE                                           *pluginbuf.nvim-STRUCTURE*

PluginbufContext                                            *PluginbufContext*

- {path} (string) path that is filled with path parameters
- {path_params} (table<string,string>) resolved path parameters
- {query_params} (table<string,any>) resolved query parameters
- {autocmd_args} (table<string,any>) |nvim_create_autocmd()| callback arguments.

PluginbufRouteDefinition                            *PluginbufRouteDefinition*

- {path} (string) path part in `scheme_name://path?query`. This can include parameter by `{parameter_name}`.
- {query_params} (table<string,any>?) default query parameters
- {read} (fun(ctx:PluginbufContext)?) be invoked if buffer matches with path. related: |BufReadCmd|
- {write} (fun(ctx:PluginbufContext)?) be invoked if buffer matches with path. related: |BufWriteCmd|
- {source} (fun(ctx:PluginbufContext)?) be invoked if buffer matches with path. related: |SourceCmd|

==============================================================================
EXAMPLES                                             *pluginbuf.nvim-EXAMPLES*

>
  local util = require("pluginbuf.util")
  require("pluginbuf").register("gh-repo-description", {
    {
      path = "{owner}/{repo}",
      read = function(ctx)
        local onwer_repo = ctx.path_params.owner .. "/" .. ctx.path_params.repo
        return util.cmd_output({ "gh", "repo", "view", onwer_repo, "--json=description", "--jq=.description" })(ctx)
      end,
      write = function(ctx)
        local onwer_repo = ctx.path_params.owner .. "/" .. ctx.path_params.repo
        return util.cmd_input({ "gh", "repo", "edit", onwer_repo, "--description", "-" })(ctx)
      end,
    },
  })
  vim.cmd.tabedit("gh-repo-description://notomo/pluginbuf.nvim")

<

==============================================================================
vim:tw=78:ts=8:ft=help
